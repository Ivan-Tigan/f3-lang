html attribute class, href, id, type, name, value, 
"hx-post", "hx-trigger", "hx-ext", "ws-connect", "ws-connected", 
"ws-send", "hx-vals", "hx-headers", "ws-after-message", "ws-swap", "hs-ws", "hx-target",
src; 
element a, main, header, footer, section, div, form, input, button, script, li, ul, nav.


system include "test.f3".

homePage a page; path "/users"; content homePageContent.
homePageContent a main; child [homePageContent inner].
[homePageContent inner] a section.

// HomePage get "/users"; content homePageContent.
// homePageContent a main; child {| inner a section. |}.



// ( Guid post "/add_task"; data { X user UserId; taskName TaskName. }. Guid = TaskId.) => 
// ( 
//     [db "world"] insert { UserId hasTask TaskId. TaskId name TaskName. }.
//     Guid content res. res a div; class "h-10 p-2 text-green-500 "; text "Task added successfully!".
// ).

( 
    Guid a inPOST; path "/add_task"; data { X user UserId; taskName TaskName. }. Guid = TaskId.
    system test "From raw prolog".
) => 
( 
    [db "world"] insert { UserId hasTask TaskId. TaskId name TaskName. }.
    Guid content res. res a div; class "h-10 p-2 text-green-500 "; text "Task added successfully!".
).
( Guid a inPOST; path "/delete_task"; data { X task TaskId. }. ) => 
( [db "world"] delete { Uid hasTask TaskId. TaskId P O. }. ).


( Guid a inPOST; path "/set_task_name"; data { X task TaskId; newName NewName. }.  ) => 
( [db "world"] delete { TaskId name OldName. }; insert { TaskId name NewName.}. ).

[db "world"] hasGraph {
    "user_1" a user; name "Bob"; hasTask "user_1/task_1", "user_1/task_2", "user_1/task_3".
    "user_1/task_1" name "Bob's first task"; number 1; timestamp "2020-01-01".
    "user_1/task_2" name "Bob's second task".
    "user_1/task_3" name "Bob's third task".
}.
htmxScript a script; src "https://unpkg.com/htmx.org".
htmxJsonPostExtension a script; src "https://unpkg.com/htmx.org/dist/ext/json-enc.js".
htmxWSExtension a script; src "https://unpkg.com/htmx.org@1.9.12/dist/ext/ws.js".
htmxWSJoin a script; text "(() => { console.log('hello'); document.addEventListener('htmx:wsOpen', (ev) => { console.log('must send'); ev.detail.socketWrapper.send(JSON.stringify({type:'ping'}))} )})()".
htmxSessionHeaders a script; text "(() => {htmx.config.headers = { 'X-Session-ID': Math.random().toString(36) }; })()".
( X portal Path. Path sha256 ShaPath. ["portal_" ShaPath] sconcat PortalId.) => (
    X "hx-ext" "ws"; "hx-trigger" "load"; "ws-connect" Path. 
    X child Path.
    Path a div; id PortalId.   
    [Path portalPage] a portalPage; path Path; content [Path portalPage content].
    [Path portalPage content] a div; id PortalId.
).


header a header; child {|
    nav a nav; child {|
        ul1 a ul; child {| li1 a li; text "Logo". |}.
        ul2 a ul; child {| li1 a li; child {| a a a; href "/users"; text "Users". |}. |}.
    |}.
|}. 

// ( 
//     [db "world"] hasGraph { UID a user; name Name. }.
//     ["/user/" UID] sconcat Path.
//     Guid a get; path Path. 
// ) => (

// ).

(  
   

    [db "world"] hasGraph { UID a user; name Name. }.
    ["/user/" UID] sconcat Path. 
    ["/ws/user/" UID] sconcat PortalPath.
) => ( 
    [homePageContent inner] child [homePageContent inner Path].
    [homePageContent inner Path] a a; id "hello"; href Path; text Name.
    [userpage UID Name] a page; path Path; content [userpage UID Name content].
    [userpage UID Name content] a main; class "container";  
        child header, [userpage UID Name content inner], 
        htmxScript, htmxJsonPostExtension, htmxWSExtension.
    [userpage UID Name content inner] a div; 
        class "flex flex-col justify-start p-2"; 
        child {|
        tasks a div; portal PortalPath.
        insert a form; "hx-post" "/add_task";  "hx-trigger" "submit"; "hx-ext" "json-enc"; "hx-target" "#response-container";
        class "flex flex-col justify-start p-2"; 
        // child
        child {|
            user a input; type "hidden"; name "user"; value UID.
            text a input; type "text"; name "taskName".
            button a button; type "submit"; text "Add task".
            response a div; id "response-container"; child {| testing a div; text "testing". |}.
        |}.
    |}.
).

( [db "world"] hasGraph { UID a user; name Name; hasTask T. T name TaskName. }. ["/ws/user/" UID] sconcat PortalPath. ) => ( 
    [PortalPath portalPage content] child {|
        [task T] a div; class "h-10 p-2"; text TaskName.
    |}. 
).
(  
    html element El. X a El.
    [Attrs ( 
        html attribute Attr. 
        X Attr Value. 
        [" " Attr "='" Value "' "] sconcat Attrs. 
        )] collect AttributesList.
    AttributesList sconcat AttributesString.
    
) => ( X hasAttributesString AttributesString.  ).

( 
    html element El. X a El.
    X hasAttributesString AttributesString.
    ["<" El " " AttributesString ">"] sconcat LeftHTML.
    ["</" El ">"] sconcat RightHTML.
) => ( X hasLeftRightHTML [LeftHTML RightHTML].  ).

( html element El. X a El; text T.  ) => ( X innerHTML T. ).

( 
    html element El. X a El. system not {X text SomeText.}.
    [T ( X child C. C hasHTML T. )] collect ChildrenList.
    ChildrenList sconcat ChildrenString.
) => ( X innerHTML ChildrenString.  ).

( X innerHTML InnerHTML; hasLeftRightHTML [OpenTag CloseTag].  [OpenTag InnerHTML CloseTag] sconcat HTML.) => 
( X hasHTML HTML. ).

( X a portalPage; path P; content C. C hasHTML HTML. ) => 
( res is [P -> HTML]. ).

( 
    X a page; path P ; content C. C hasHTML HTML. 
    ["<head><link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\"></head><body>" HTML "</body>"] sconcat FullHTML.
) => 
( res is [P -> FullHTML]. ).
// system staticError "Err".
system runWebServer 3000.
// system query [ [A -> S P O] ( A hasChildren {S P O.}.)].
// system query [ [A -> X] ( A hasChildren X.)].
// system query [ [A ==> B] ( A child B.)].
// system query [ X ( res is X.)].
// system debug listing.
