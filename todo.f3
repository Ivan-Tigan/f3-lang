html attribute class, href, id, l1, l2, l3; element a, div.

homePage a page; path "/users"; content homePageContent.
homePageContent a div; class "flex w-full h-full justify-center"; child [homePageContent inner].
[homePageContent inner] a div; class "flex flex-col justify-start p-2".

{ Guid a inPOST; path "/add_task"; data { X user UserId; taskName TaskName. }.  Guid sha256 TaskId.  } => 
{ [db "world"] mutations [insert { UserId hasTask TaskId. TaskId name TaskName. }].  }.

{ Guid a inPOST; path "/delete_task"; data { X task TaskId. }.  } => 
{ [db "world"] mutations [ delete { Uid hasTask TaskId. TaskId P O. }].}.

{ Guid a inPOST; path "/set_task_name"; data { X task TaskId; newName NewName. }.  } => 
{ [db "world"] mutations [delete { TaskId name OldName. } insert { TaskId name NewName.} ]. }.

[db "world"] hasGraph {
    "user_1" a user; name "Bob"; hasTask "user_1/task_1", "user_1/task_2", "user_1/task_3".
    "user_1/task_1" name "Bob's first task".
    "user_1/task_2" name "Bob's second task".
    "user_1/task_3" name "Bob's third task".
}.

{ 
    [db "world"] hasGraph G. G query { UID a user; name Name. }.
    ["/user/" UID] sconcat Path.
} => {
    [homePageContent inner] child [homePageContent inner Path].
    [homePageContent inner Path] a a; id "hello"; href Path; text Name.
    [userpage UID Name] a page; path Path; content [userpage UID Name content].
    [userpage UID Name content] a div; class "flex w-full h-full justify-center"; child [userpage UID Name content inner].
    [userpage UID Name content inner] a div; class "flex flex-col justify-start p-2".
}.

{ [db "world"] hasGraph G. G query { UID a user; name Name; hasTask T.}.  } => {
    [userpage UID Name content inner] child [userpage UID Name content inner T].
    [userpage UID Name content inner T] a div; text T. 
}.

{ 
    html element El. X a El.
    [Attrs {
        html attribute Attr. 
        X Attr Value. 
        [" " Attr "='" Value "' "] sconcat Attrs. 
        }] collect AttributesList.
    AttributesList sconcat AttributesString.
    
} => { X hasAttributesString AttributesString.  }.

{
    html element El. X a El.
    X hasAttributesString AttributesString.
    ["<" El " " AttributesString ">"] sconcat LeftHTML.
    ["</" El ">"] sconcat RightHTML.
} => { X hasLeftRightHTML [LeftHTML RightHTML].  }.

{ html element El. X a El; text T.  } => { X innerHTML T. }.

{
    html element El. X a El.
    [T { X child C. C hasHTML T. }] collect ChildrenList.
    ChildrenList sconcat ChildrenString.
} => { X innerHTML ChildrenString.  }.
{
    X innerHTML InnerHTML; hasLeftRightHTML [OpenTag CloseTag].
    [OpenTag InnerHTML CloseTag] sconcat HTML.
} => { X hasHTML HTML. }.

{ X a page; path P ; content C.  C hasHTML HTML.  } => 
{ res is [P -> HTML].  }.
